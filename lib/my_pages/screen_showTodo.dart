import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:pomotask/backend_code/CrudOperations.dart';
import 'package:pomotask/custome_assets/tasksClass.dart';
import 'package:pomotask/custome_assets/tasksTile.dart';

class ScreenShowtodo extends StatefulWidget {
  final String userId;
  final String listid;
  
  const ScreenShowtodo({
    Key? key,
    required this.userId,
    required this.listid,
  }) : super(key: key);

  @override
  _ScreenShowtodoState createState() => _ScreenShowtodoState();
}

class _ScreenShowtodoState extends State<ScreenShowtodo> {
  String _listName = 'Loading...';
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descController = TextEditingController();
  bool _isImportant = false;

  @override
  void initState() {
    super.initState();
    _loadListName();
  }

  Future<void> _loadListName() async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection('Users')
          .doc(widget.userId)
          .collection('Lists')
          .doc(widget.listid)
          .get();

      if (doc.exists) {
        setState(() {
          _listName = doc['ListTitle'] ?? 'Untitled List';
        });
      }
    } catch (e) {
      setState(() => _listName = 'My List');
      _showToast('Error loading list name');
    }
  }

  Future<void> _addTask() async {
    if (_titleController.text.trim().isEmpty) {
      _showToast('Please enter a task title');
      return;
    }

    final newTask = Task(
      id: '', // Will be generated by Firestore
      title: _titleController.text.trim(),
      description: _descController.text.trim(),
      isCompleted: false,
      isImportant: _isImportant,
      createdAt: Timestamp.now(),
      userId: widget.userId,
    );

    try {
      await addTodo(widget.userId, widget.listid, newTask);
      _titleController.clear();
      _descController.clear();
      setState(() => _isImportant = false);
      if (mounted) Navigator.pop(context);
    } catch (e) {
      _showToast('Error adding task');
    }
  }

  Future<void> _showAddTaskDialog() async {
    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Padding(
              padding : EdgeInsets.all(10) , 
              child : AlertDialog(
              backgroundColor: Color(0xFF1E1E1E),
              title: Text(
                'Add Task',
                style: TextStyle(color: Colors.white),
              ),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: _titleController,
                      style: TextStyle(color: Colors.white),
                      decoration: InputDecoration(
                        hintText: 'Task title',
                        hintStyle: TextStyle(color: Colors.grey),
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(color: Colors.white),
                        ),
                      ),
                    ),
                    SizedBox(height: 10),
                    TextField(
                      controller: _descController,
                      style: TextStyle(color: Colors.white),
                      decoration: InputDecoration(
                        hintText: 'Task description',
                        hintStyle: TextStyle(color: Colors.grey),
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(color: Colors.white),
                        ),
                      ),
                      maxLines: 3,
                    ),
                    SizedBox(height: 10),
                    Row(
                      children: [
                        IconButton(
                          onPressed: () {
                            setState(() => _isImportant = !_isImportant);
                          },
                          icon: _isImportant
                              ? FaIcon(
                                  FontAwesomeIcons.solidStar,
                                  color: Colors.yellow,
                                )
                              : FaIcon(
                                  FontAwesomeIcons.star,
                                  color: Colors.grey,
                                ),
                        ),
                        Spacer(),
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          child: Text('Cancel'),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: _addTask,
                          child: Text('Add'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            )
            );
          },
        );
      },
    );
  }

  Widget EmptyTodoView() {
  const String mysvg = 'Assets/Images/welcome (1).svg';
  
  return Container(
    width: double.infinity,
    height: double.infinity,
    color: Colors.transparent,
    child: Column(
      children: [
        const Spacer(),
        SvgPicture.asset(mysvg, width: 200, height: 200),
        const SizedBox(height: 8),
        const Text(
          "what do you want to do today?",
          style: TextStyle(color: Colors.white, fontSize: 20),
        ),
        const SizedBox(height: 4),
        const Text(
          "Tap + to add new task",
          style: TextStyle(color: Colors.white, fontSize: 16),
        ),
        const Spacer(),
      ],
    ),
  );
}

  void _showToast(String message) {
    Fluttertoast.showToast(
      msg: message,
      backgroundColor: Colors.red,
      textColor: Colors.white,
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF121212),
      appBar: AppBar(
        automaticallyImplyLeading: true,
        title: Text(_listName),
        backgroundColor: Colors.transparent,
        elevation: 0,
        foregroundColor: Colors.white,
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddTaskDialog,
        child: Icon(Icons.add),
        backgroundColor: Color(0xFF363636),
        foregroundColor: Colors.white,
      ),
      body: _buildTaskList(),
    );
  }

  Widget _buildTaskList() {
    return StreamBuilder<QuerySnapshot>(
      stream: getUserTodos(widget.userId, widget.listid),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        }
        if(!snapshot.hasData|| snapshot.data!.docs.isEmpty ){
          return EmptyTodoView();

        }




        if (snapshot.hasError) {
          return Center(child: Text('Error loading tasks'));
        }

        

        

        final tasks = snapshot.data!.docs.map((doc) {
          return Task.fromdocument(doc);
        }).toList();

        return ListView.builder(
          padding: EdgeInsets.all(8),
          itemCount: tasks.length,
          itemBuilder: (context, index) {
            final task = tasks[index];
            return Padding( padding : EdgeInsets.all(10),
              child :taskTile(
              key: ValueKey(task.id),
              mytask: task,
              isCompleted: task.isCompleted,
              toggle: () => Toggle(widget.userId, widget.listid, task),
              delete: () => Delete(widget.userId, widget.listid, task),
              isImportant: task.isImportant,
              markImp: () => MarkImp(widget.userId, widget.listid, task),
              onEditComplete: (updatedTask) =>
                  Update(widget.userId, widget.listid, task, updatedTask),
              userId: widget.userId,
              ListId: widget.listid,
            ));
          },
        );
      },
    );
  }
  

}